pipeline{
    agent any
    tools {
        terraform 'terraform'
    }
    
    stages {
        stage('Build Infrastructure && Build Image && Push Image') {
            parallel {          
                stage('Build Infrastructure') {
                    steps {
                        git branch: 'main', credentialsId: 'github-ssh-key', url: 'git@github.com:unicum0212/petclinic-devops-deploy.git'  
                        dir('terraform/env_2'){
                            sh 'terraform init -upgrade'
                            sh 'terraform apply -auto-approve -no-color'
                        }
                    }
                }
                stage('Build Image') {
                    steps{
                        sh 'docker build -t flawwwless/dynamic-inventory-ansible:latest .'
                    }
                    
                }
            }
        }
        stage('Push Image') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'dockerHub', passwordVariable: 'dockerHubPassword', usernameVariable: 'dockerHubUser')]) {
                    sh "docker login -u ${env.dockerHubUser} -p ${env.dockerHubPassword}"
                    sh 'docker push flawwwless/dynamic-inventory-ansible:latest'
                }
            }
        }
        stage('Pull Ansible Roles') {
            steps {
                git branch: 'main', credentialsId: 'github-key', url: 'git@github.com:unicum0212/ansible-roles-petclinic.git'
            }
        }
        stage('Pull repository and Start Tests') {
            agent {
                docker {
                    image 'flawwwless/dynamic-inventory-ansible:latest'
                    args '-u root -v /home/ubuntu/ansible/:/ansible/ -v /home/ubuntu/ansible/ansible.cfg:/etc/ansible/ansible.cfg -v /var/lib/docker/volumes/jenkins_home/_data/workspace/${JOB_NAME}/:/ansible/playbooks'
                }
            }
            steps {
                sh 'ansible-playbook /ansible/playbooks/tests-petclinic.yml -e "hosts_tag=tag_Status_Clean_Env2"'
            }
        }
        stage('Deploy App on Clean Server') {
            agent {
                docker {
                    image 'flawwwless/dynamic-inventory-ansible:latest'
                    args '-u root -v /home/ubuntu/ansible/:/ansible/ -v /home/ubuntu/ansible/ansible.cfg:/etc/ansible/ansible.cfg -v /var/lib/docker/volumes/jenkins_home/_data/workspace/${JOB_NAME}/:/ansible/playbooks'
                }
            }
            steps {
                sh 'ansible-playbook /ansible/playbooks/deploy-petclinic.yml -e "hosts_tag=tag_Status_Clean_Env2"'
            }
        }
        stage('Change Status of Server') {
            agent {
                docker {
                    image 'flawwwless/dynamic-inventory-ansible:latest'
                    args '-u root -v /home/ubuntu/script.sh:/root/script.sh'
                }
            }
            steps {
                sh '/root/script.sh'
            }
        }
        stage('Change Active Env') {
            input{
                message "Do you want to change active environment to Env2?"
            }
            steps { 
                sh 'echo "ACTIVE_ENV=env_2" > /etc/environment'
            }
        }
    }
    post {
        aborted {
            dir('terraform/env_2'){
                sh 'terraform init'
                sh 'terraform apply -destroy -auto-approve -no-color'
            }
        }
    }
}